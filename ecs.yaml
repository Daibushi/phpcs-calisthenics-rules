imports:
    - { resource: 'vendor/symplify/easy-coding-standard/config/sets/symfony.yaml' }
    - { resource: 'vendor/symplify/easy-coding-standard/config/sets/php70.yaml' }
    - { resource: 'vendor/symplify/easy-coding-standard/config/sets/php71.yaml' }
    # custom
    - { resource: 'vendor/symplify/easy-coding-standard/config/sets/common.yaml' }
    - { resource: 'vendor/symplify/easy-coding-standard/config/sets/symplify.yaml' }
    - { resource: 'config/object-calisthenics.yml' }

services:
    PhpCsFixer\Fixer\ControlStructure\YodaStyleFixer:
        equal: false
        identical: false
        less_and_greater: false

    # Metrics
    PHP_CodeSniffer\Standards\Generic\Sniffs\Metrics\CyclomaticComplexitySniff:
        absoluteComplexity: 4
    PHP_CodeSniffer\Standards\Generic\Sniffs\Metrics\NestingLevelSniff:
        absoluteNestingLevel: 2

    # Slevomat
    SlevomatCodingStandard\Sniffs\Classes\UnusedPrivateElementsSniff: ~
    SlevomatCodingStandard\Sniffs\Exceptions\ReferenceThrowableOnlySniff: ~
    SlevomatCodingStandard\Sniffs\TypeHints\TypeHintDeclarationSniff:
        enableEachParameterAndReturnInspection: true

parameters:
    skip:
        SlevomatCodingStandard\Sniffs\TypeHints\TypeHintDeclarationSniff:
            - '*src/ObjectCalisthenics/Sniffs/*/*Sniff.php'

        PHP_CodeSniffer\Standards\Generic\Sniffs\CodeAnalysis\AssignmentInConditionSniff.FoundInWhileCondition: ~

        Symplify\CodingStandard\Sniffs\CleanCode\ForbiddenStaticFunctionSniff: ~
        # Symfony ruleset
        PhpCsFixer\Fixer\PhpTag\BlankLineAfterOpeningTagFixer: ~
        PhpCsFixer\Fixer\Operator\NewWithBracesFixer: ~
        PhpCsFixer\Fixer\Phpdoc\PhpdocAlignFixer: ~
        # mutually excluded
        SlevomatCodingStandard\Sniffs\ControlStructures\DisallowYodaComparisonSniff: ~
        PhpCsFixer\Fixer\Operator\UnaryOperatorSpacesFixer: ~
